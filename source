 -- Variablen für die Animationen
local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- Animationen laden
local WalkAnim = Instance.new("Animation")
WalkAnim.AnimationId = "rbxassetid://11666515506"

local RunAnim = Instance.new("Animation")
RunAnim.AnimationId = "rbxassetid://11666512870"

local JumpAnim = Instance.new("Animation")
JumpAnim.AnimationId = "rbxassetid://10345160772"

local FallAnim = Instance.new("Animation")
FallAnim.AnimationId = "rbxassetid://10621207244"

local FlyAnim1 = Instance.new("Animation")
FlyAnim1.AnimationId = "rbxassetid://180435571"

local FlyAnim2 = Instance.new("Animation")
FlyAnim2.AnimationId = "rbxassetid://180435792"

-- Animation-Tracks erstellen
local WalkTrack = Humanoid:LoadAnimation(WalkAnim)
local RunTrack = Humanoid:LoadAnimation(RunAnim)
local JumpTrack = Humanoid:LoadAnimation(JumpAnim)
local FallTrack = Humanoid:LoadAnimation(FallAnim)
local FlyTrack1 = Humanoid:LoadAnimation(FlyAnim1)
local FlyTrack2 = Humanoid:LoadAnimation(FlyAnim2)

-- Fly-Logik
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local isFlying = false
local flySpeed = 50

-- Funktion zum Starten des Fliegens
local function StartFlying()
    isFlying = true
    Humanoid:ChangeState(Enum.HumanoidStateType.Freefall) -- Setze den Humanoid in den Freefall-Zustand
    FlyTrack1:Play()
    FlyTrack2:Play()
end

-- Funktion zum Stoppen des Fliegens
local function StopFlying()
    isFlying = false
    FlyTrack1:Stop()
    FlyTrack2:Stop()
    Humanoid:ChangeState(Enum.HumanoidStateType.Landed) -- Setze den Humanoid zurück in den Landed-Zustand
end

-- Eingabeerkennung
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end -- Ignoriere Eingaben, wenn das Spiel sie bereits verarbeitet hat

    if input.KeyCode == Enum.KeyCode.Space then -- Leertaste zum Starten/Stoppen des Fliegens
        if isFlying then
            StopFlying()
        else
            StartFlying()
        end
    end
end)

-- Flugbewegung
RunService.RenderStepped:Connect(function()
    if isFlying then
        local direction = Vector3.new(0, 0, 0)

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then -- Vorwärts
            direction = direction + RootPart.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then -- Rückwärts
            direction = direction - RootPart.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then -- Links
            direction = direction - RootPart.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then -- Rechts
            direction = direction + RootPart.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then -- Hoch
            direction = direction + Vector3.new(0, 1, 0)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then -- Runter
            direction = direction - Vector3.new(0, 1, 0)
        end

        direction = direction.Unit * flySpeed
        RootPart.Velocity = direction
    end
end)

-- Anti-Cheat-Sicherheit
-- Deaktiviere unnötige Humanoid-Eigenschaften, um Anti-Cheat zu umgehen
Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)

-- Hinweis für den Benutzer
print("Fly-Script geladen! Drücke Leertaste, um zu fliegen.")
